{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome!","title":"Home"},{"location":"#welcome","text":"","title":"Welcome!"},{"location":"cgroups/","text":"cgroups Ubuntu 18.04 view cgroup info of process via pid ps -o cgroup 12345 create memory cgroup sudo mkdir /sys/fs/cgroup/memory/cgroup-a limit memory of anything running in the cgroup cgroup-a to 4096 bytes echo 4096 | sudo tee /sys/fs/cgroup/memory/cgroup-a/memory.limit_in_bytes add process via pid to the cgroup cgroup-a sudo echo 12345 > /sys/fs/cgroup/memory/cgroup-a/cgroup.procs using libcgroup create memory cgroup cgroup-a sudo cgcreate -g memory:cgroup-a delete memory cgroup cgroup-a sudo cgdelete memory:cgroup-a run app app-a in cgroup cgroup-a sudo cgexec -g memory:cgroup-a app-a","title":"cgroups"},{"location":"cgroups/#cgroups","text":"","title":"cgroups"},{"location":"cgroups/#ubuntu-1804","text":"view cgroup info of process via pid ps -o cgroup 12345 create memory cgroup sudo mkdir /sys/fs/cgroup/memory/cgroup-a limit memory of anything running in the cgroup cgroup-a to 4096 bytes echo 4096 | sudo tee /sys/fs/cgroup/memory/cgroup-a/memory.limit_in_bytes add process via pid to the cgroup cgroup-a sudo echo 12345 > /sys/fs/cgroup/memory/cgroup-a/cgroup.procs","title":"Ubuntu 18.04"},{"location":"cgroups/#using-libcgroup","text":"create memory cgroup cgroup-a sudo cgcreate -g memory:cgroup-a delete memory cgroup cgroup-a sudo cgdelete memory:cgroup-a run app app-a in cgroup cgroup-a sudo cgexec -g memory:cgroup-a app-a","title":"using libcgroup"},{"location":"kubernetes/","text":"Kubernetes Ubuntu 18.04 kubectl get services kubectl get services get deployments kubectl get deployments minikube start with virtualbox minikube start --vm-driver=virtualbox get services minikube service list","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"kubernetes/#ubuntu-1804","text":"","title":"Ubuntu 18.04"},{"location":"kubernetes/#kubectl","text":"get services kubectl get services get deployments kubectl get deployments","title":"kubectl"},{"location":"kubernetes/#minikube","text":"start with virtualbox minikube start --vm-driver=virtualbox get services minikube service list","title":"minikube"},{"location":"linux-system-calls/","text":"Linux System Calls seccomp (secure computing mode) Filter system calls issued by a program. The filters are based on BPF (Berkley Packet Filters). The idea behind seccomp is to restrict the system calls that can be made from a process, he said. The Linux kernel has a few hundred system calls, but most of them are not needed by any given process. If a process can be compromised and tricked into making other system calls, though, it may lead to a security vulnerability that could result in the compromise of the whole system. By restricting what system calls can be made, seccomp is a key component for building application sandboxes. #include <seccomp.h> /* libseccomp */ scmp_filter_ctx ctx; ctx = seccomp_init(SCMP_ACT_KILL); // default action: kill seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(dup2), 2, SCMP_A0(SCMP_CMP_EQ, 1), SCMP_A1(SCMP_CMP_EQ, 2)); // pass dup2(1,2); //fail dup2(2, 42); dup2 Change file descriptor. // redirect stderr to stdout dup2(1, 2); setrlimit Set resource limits. struct rlimit rl; getrlimit (RLIMIT_CPU, &rl); rl.rlim_cur = 1; setrlimit (RLIMIT_CPU, &rl);","title":"Linux System Calls"},{"location":"linux-system-calls/#linux-system-calls","text":"","title":"Linux System Calls"},{"location":"linux-system-calls/#seccomp-secure-computing-mode","text":"Filter system calls issued by a program. The filters are based on BPF (Berkley Packet Filters). The idea behind seccomp is to restrict the system calls that can be made from a process, he said. The Linux kernel has a few hundred system calls, but most of them are not needed by any given process. If a process can be compromised and tricked into making other system calls, though, it may lead to a security vulnerability that could result in the compromise of the whole system. By restricting what system calls can be made, seccomp is a key component for building application sandboxes. #include <seccomp.h> /* libseccomp */ scmp_filter_ctx ctx; ctx = seccomp_init(SCMP_ACT_KILL); // default action: kill seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(dup2), 2, SCMP_A0(SCMP_CMP_EQ, 1), SCMP_A1(SCMP_CMP_EQ, 2)); // pass dup2(1,2); //fail dup2(2, 42);","title":"seccomp (secure computing mode)"},{"location":"linux-system-calls/#dup2","text":"Change file descriptor. // redirect stderr to stdout dup2(1, 2);","title":"dup2"},{"location":"linux-system-calls/#setrlimit","text":"Set resource limits. struct rlimit rl; getrlimit (RLIMIT_CPU, &rl); rl.rlim_cur = 1; setrlimit (RLIMIT_CPU, &rl);","title":"setrlimit"}]}